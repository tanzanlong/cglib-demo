cglib是什么

是强大的，高性能的代码生成库。

api

net.sf.cglib.core：底层字节码操作类；大部分与ASP相关。
net.sf.cglib.transform：编译期、运行期的class文件转换类。
net.sf.cglib.proxy：代理创建类、方法拦截类。
net.sf.cglib.reflect：更快的反射类、C#风格的代理类。
net.sf.cglib.util：集合排序工具类
net.sf.cglib.beans：JavaBean相关的工具类

本质上来说，对于需要被代理的类，它只是动态生成一个子类以覆盖非final的方法，同时绑定钩子回调自定义的拦截器。值得说的是，它比JDK动态代理还要快。

net.sf.cglib.proxy.Callback只是一个用于标记的接口，net.sf.cglib.proxy.Enhancer使用的所有回调都会继承这个接口。

net.sf.cglib.proxy.MethodInterceptor是最常用的回调类型，在基于代理的AOP实现中它经常被用来拦截方法调用。

net.sf.cglib.proxy.MethodInterceptor满足了所有的代理需求，但对于某些特定场景它可能使用起来不太方便。为了方便使用和高性能，CGLIB提供了另外一些特殊的回调类型。例如，

net.sf.cglib.proxy.FixedValue：在强制一个特定方法返回固定值，在特定场景下非常有用且性能高。
net.sf.cglib.proxy.NoOp：它直接透传到父类的方法实现。
net.sf.cglib.proxy.LazyLoader：在被代理对象需要懒加载场景下非常有用，如果被代理对象加载完成，那么在以后的代理调用时会重复使用。
net.sf.cglib.proxy.Dispatcher：与net.sf.cglib.proxy.LazyLoader差不多，但每次调用代理方法时都会调用loadObject方法来加载被代理对象。
net.sf.cglib.proxy.ProxyRefDispatcher：与Dispatcher相同，但它的loadObject方法支持传入代理对象。



在例子中，AuthorizationInterceptor应用于save方法，NoOp.INSTANCE应用于load方法。你可以通过net.sf.cglib.proxy.Enhancer.setInterfaces(Class[])指明代理需要实现的接口，但这个不是必须的。

对于net.sf.cglib.proxy.Enhancer，除了设置一个回调对象数组，你也可以使用net.sf.cglib.proxy.Enhancer.setCallbackTypes(Class[])设置一个回调类型数组。在代理创建过程中如果你没有实际的回调对象，那么这种方法非常有用。像回调对象一样，你也需要使用net.sf.cglib.proxy.CallbackFilter来指明每个拦截方法的回调类型下标



总结
CGLIB是一个强大的高性能的代码生成库。作为JDK动态代理的互补，它对于那些没有实现接口的类提供了代理方案。在底层，它使用ASM字节码操纵框架。本质上来说，CGLIB通过产生子类覆盖非final方法来进行代理。它比使用Java反射的JDK动态代理方法更快。CGLIB不能代理一个final类或者final方法。通常来说，你可以使用JDK动态代理方法来创建代理，对于没有接口的情况或者性能因素，CGLIB是一个很好的选择。